#!/bin/bash

DOTFILES_GITHUB="https://github.com/ryosebach/dotfiles.git"; export DOTFILES_GITHUB
if [ -z "${DOTPATH:-}" ]; then
	DOTPATH=~/.dotfiles; export DOTPATH
fi

# ostype returns the lowercase OS name
ostype() {
    # shellcheck disable=SC2119
    uname | lower
}

# os_detect export the PLATFORM variable as you see fit
os_detect() {
    export PLATFORM
    case "$(ostype)" in
        *'linux'*)  PLATFORM='linux'   ;;
        *'darwin'*) PLATFORM='osx'     ;;
        *'bsd'*)    PLATFORM='bsd'     ;;
        *)          PLATFORM='unknown' ;;
    esac
}

# lower returns a copy of the string with all letters mapped to their lower case.
# shellcheck disable=SC2120
lower() {
    if [ $# -eq 0 ]; then
        cat <&0
    elif [ $# -eq 1 ]; then
        if [ -f "$1" -a -r "$1" ]; then
            cat "$1"
        else
            echo "$1"
        fi
    else
        return 1
    fi | tr "[:upper:]" "[:lower:]"
}

# upper returns a copy of the string with all letters mapped to their upper case.
# shellcheck disable=SC2120
upper() {
    if [ $# -eq 0 ]; then
        cat <&0
    elif [ $# -eq 1 ]; then
        if [ -f "$1" -a -r "$1" ]; then
            cat "$1"
        else
            echo "$1"
        fi
    else
        return 1
    fi | tr "[:lower:]" "[:upper:]"
}

is_osx() {
    os_detect
    if [ "$PLATFORM" = "osx" ]; then
        return 0
    else
        return 1
    fi
}

is_linux() {
    os_detect
    if [ "$PLATFORM" = "linux" ]; then
        return 0
    else
        return 1
    fi
}

is_bsd() {
    os_detect
    if [ "$PLATFORM" = "bsd" ]; then
        return 0
    else
        return 1
    fi
}

e_newline() {
    printf "\n"
}

e_header() {
    printf " \033[37;1m%s\033[m\n" "$*"
}

e_error() {
    printf " \033[31m%s\033[m\n" "✖ $*" 1>&2
}

e_warning() {
    printf " \033[31m%s\033[m\n" "$*"
}

e_done() {
    printf " \033[37;1m%s\033[m...\033[32mOK\033[m\n" "✔ $*"
}

e_arrow() {
    printf " \033[37;1m%s\033[m\n" "➜ $*"
}

e_indent() {
    for ((i=0; i<${1:-4}; i++)); do
        echon " "
    done
    if [ -n "$2" ]; then
        echo "$2"
    else
        cat <&0
    fi
}

e_success() {
    printf " \033[37;1m%s\033[m%s...\033[32mOK\033[m\n" "✔ " "$*"
}

# echon is a script to emulate the -n flag functionality with 'echo'
# for Unix systems that don't have that available.
echon() {
    echo "$*" | tr -d '\n'
}

# is_debug returns true if $DEBUG is set
is_debug() {
    if [ "$DEBUG" = 1 ]; then
        return 0
    else
        return 1
    fi
}

is_exists() {
	which "$1" >/dev/null 2>&1
	return $?
}

has() {
	is_exists "$@"
}

yes_or_no(){
	while true; do
		read answer
		case $answer in
		yes)
			return 0
			;;
		y)
			return 0
			;;
		no)
			return 1
			;;
		N)
			return 1
			;;
		n)
			return 1
			;;
		*)
			echo -e "please say yes or no"
			;;
		esac
	done
}

available () {
    local x candidates
    candidates="$1:"
    while [ -n "$candidates" ]
    do
        x=${candidates%%:*}
        candidates=${candidates#*:}
        if type "$x" >/dev/null 2>&1; then
            echo "$x"
            return 0
        else
            continue
        fi
    done
    return 1
}

export_github_info () {
	GITHUB_USERNAME=$(echo `git config --global --list | grep user.name | tr '=' '\n'` | awk '{print $2}')
	GITHUB_USERMAIL=$(echo `git config --global --list | grep user.email | tr '=' '\n'` | awk '{print $2}')
	export GITHUB_USERNAME
	export GITHUB_USERMAIL
}


if [ -z "${FILTER_TOOL}" ]; then
	FILTER_TOOL=$(available "fzf:peco"); export FILTER_TOOL
fi

if [ -z "${GITHUB_USERNAME}" ]; then
	export_github_info
fi

dotfiles_logo='
       _       _     __  _  _
      | |     | |  / ._|(_)| |
    __| | ___ | |_ | |_  _ | |  ___  ___
   / _| |/ _ \| ,_||  _|| || | / _ \/ __|
  | (_| | (_) | |_ | |  | || ||  __/\__ \
   \___/ \___/ \__||_|  |_||_| \___||___/
'

dotfiles_download() {
    if [ -d "$DOTPATH" ]; then
   #     log_fail "$DOTPATH: already exists"
        exit 1
    fi

    e_newline
    e_header "Downloading dotfiles..."

    if is_debug; then
        :
    else
		if is_exists "git"; then
	        # --recursive equals to ...
	        # git submodule init
	        # git submodule update
	        git clone --recursive "$DOTFILES_GITHUB" "$DOTPATH"

	    elif is_exists "curl" || is_exists "wget"; then
	        # curl or wget
	        local tarball="https://github.com/ryosebach/dotfiles/archive/master.tar.gz"
	        if is_exists "curl"; then
	            curl -L "$tarball"

	        elif is_exists "wget"; then
	            wget -O - "$tarball"

	        fi | tar xvz
	        if [ ! -d dotfiles-master ]; then
	 #           log_fail "dotfiles-master: not found"
	            exit 1
	        fi
	        command mv -f dotfiles-master "$DOTPATH"

	    else
	        log_fail "curl or wget required"
	        exit 1
	    fi
    fi
    e_newline && e_done "Download"
}

dotfiles_deploy() {
    e_newline
    e_header "Deploying dotfiles..."

    if [ ! -d $DOTPATH ]; then
 #       log_fail "$DOTPATH: not found"
        exit 1
    fi

    cd "$DOTPATH"

    if is_debug; then
        :
    else
        make deploy
    fi &&

        e_newline && e_done "Deploy"
}

dotfiles_initialize() {
    if [ "$1" = "init" ]; then
        e_newline
        e_header "Initializing dotfiles..."

        if is_debug; then
            :
        else
            if [ -f Makefile ]; then
                make init
            else
                log_fail "Makefile: not found"
                exit 1
            fi
        fi &&
            e_newline && e_done "Initialize"
    fi
}

dotfiles_install() {
	# 1. Download the repository
	# ==> downloading
	dotfiles_download &&

	# 2. Deploy dotfiles to your home directory
	# ==> deploying
	dotfiles_deploy &&

	# 3. Execute all sh files within etc/init/
	# ==> initializing
	dotfiles_initialize "$@"
}

if echo "$-" | grep -q "i"; then
    # -> source a.sh
    VITALIZED=1
    export VITALIZED

    : return
else
    # three patterns
    # -> cat a.sh | bash
    # -> bash -c "$(cat a.sh)"
    # -> bash a.sh

    # -> bash a.sh
    if [ "$0" = "${BASH_SOURCE:-}" ]; then
        exit
    fi

    # -> cat a.sh | bash
    # -> bash -c "$(cat a.sh)"
    if [ -n "${BASH_EXECUTION_STRING:-}" ] || [ -p /dev/stdin ]; then
        # if already vitalized, skip to run dotfiles_install
        if [ "${VITALIZED:=0}" = 1 ]; then
            exit
        fi

        trap "e_error 'terminated'; exit 1" INT ERR
        echo "$dotfiles_logo"
        dotfiles_install "$@"

        # Restart shell if specified "bash -c $(curl -L {URL})"
        # not restart:
        #   curl -L {URL} | bash
        if [ -p /dev/stdin ]; then
            e_warning "Now continue with Rebooting your shell"
        else
            e_newline
            e_arrow "Restarting your shell..."
            exec "${SHELL:-/bin/bash}"
        fi
    fi
fi



